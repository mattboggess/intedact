
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_univariate_categorical_summary.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_univariate_categorical_summary.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_univariate_categorical_summary.py:


Univariate Categorical Summary
=======

Example of univariate eda summary for a categorical variable.

The categorical summary computes the following:

- A countplot with counts and percentages by level of the categorical
- A table with summary statistics

.. GENERATED FROM PYTHON SOURCE LINES 12-21

.. code-block:: default

    import warnings

    warnings.filterwarnings("ignore")

    import pandas as pd
    import intedact
    import seaborn as sns









.. GENERATED FROM PYTHON SOURCE LINES 22-26

For our first example, we plot the name of countries who have had GDPR violations.
By default, the plot will try to order and orient the columns appropriately. Here we order by descending count
and the plot was flipped horizontally due to the number of levels in the variable.


.. GENERATED FROM PYTHON SOURCE LINES 26-34

.. code-block:: default

    data = pd.read_csv(
        "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_violations.tsv",
        sep="\t",
    )
    table, fig = intedact.categorical_univariate_summary(data, "name", fontsize=10)
    fig.show()
    table




.. image-sg:: /auto_examples/images/sphx_glr_plot_univariate_categorical_summary_001.png
   :alt: plot univariate categorical summary
   :srcset: /auto_examples/images/sphx_glr_plot_univariate_categorical_summary_001.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>count_observed</th>
          <th>count_unique</th>
          <th>count_missing</th>
          <th>percent_missing</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>name</th>
          <td>250</td>
          <td>25</td>
          <td>0</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 35-38

We can do additional things such as condense extra columns into an "Other" column, add a bar for missing values,
and change the sort order to sort alphabetically.


.. GENERATED FROM PYTHON SOURCE LINES 38-44

.. code-block:: default

    table, fig = intedact.categorical_univariate_summary(
        data, "name", include_missing=True, order="sorted", max_levels=10, fontsize=10
    )
    fig.show()
    table




.. image-sg:: /auto_examples/images/sphx_glr_plot_univariate_categorical_summary_002.png
   :alt: plot univariate categorical summary
   :srcset: /auto_examples/images/sphx_glr_plot_univariate_categorical_summary_002.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>count_observed</th>
          <th>count_unique</th>
          <th>count_missing</th>
          <th>percent_missing</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>name</th>
          <td>250</td>
          <td>25</td>
          <td>0</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 45-48

To handle ordinal variable sorting, one must convert the column to an ordered categorical data type. Here's an example
of this for the diamonds dataset.


.. GENERATED FROM PYTHON SOURCE LINES 48-60

.. code-block:: default


    data = sns.load_dataset("diamonds")
    data["clarity"] = pd.Categorical(
        data["clarity"],
        categories=["I1", "SI1", "SI2", "VS2", "VS1", "VVS2", "VVS1", "IF"],
        ordered=True,
    )
    table, fig = intedact.categorical_univariate_summary(
        data, "clarity", flip_axis=False, fontsize=10
    )
    fig.show()
    table



.. image-sg:: /auto_examples/images/sphx_glr_plot_univariate_categorical_summary_003.png
   :alt: plot univariate categorical summary
   :srcset: /auto_examples/images/sphx_glr_plot_univariate_categorical_summary_003.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>count_observed</th>
          <th>count_unique</th>
          <th>count_missing</th>
          <th>percent_missing</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>clarity</th>
          <td>53940</td>
          <td>8</td>
          <td>0</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.475 seconds)


.. _sphx_glr_download_auto_examples_plot_univariate_categorical_summary.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_univariate_categorical_summary.py <plot_univariate_categorical_summary.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_univariate_categorical_summary.ipynb <plot_univariate_categorical_summary.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
